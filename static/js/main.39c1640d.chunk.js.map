{"version":3,"sources":["components/Headline.js","components/FilterChip.js","components/FilterGroup.js","components/RandomizeButton.js","components/ActivitySuggestion.js","App.js","reportWebVitals.js","index.js"],"names":["headlineCss","css","Headline","props","filterChipCss","FilterChip","color","chosen","isSelected","toString","onClick","tag","style","backgroundColor","filterGroupCss","FilterGroup","filters","availableFilters","push","selectedFilters","includes","addRemoveFilter","className","randomizeButtonCss","RandomizeButton","clicked","divCss","textCss","ActivitySuggestion","pressed","activity","App","useState","currentSuggestion","setCurrentSuggestion","hasBeenClicked","setHasBeenClicked","initialState","setSelectedFilters","filter","some","item","prevFilters","useFilters","Set","activities","every","tags","add","randomActivity","filteredActivities","length","name","randomNum","Math","floor","random","randomSelection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39c1640d.chunk.js","sourcesContent":["import { css, jsx } from '@emotion/react';\n/** @jsxImportSource @emotion/react */\n\nconst headlineCss = css`\n  font-size: 1.75em;\n  text-align: center;\n`\n\nfunction Headline(props) {\n  return (\n    <h1 css={headlineCss}>\n      What should you do with your kids today?\n    </h1>\n  );\n}\n\nexport default Headline;","import { css, jsx } from '@emotion/react';\n/** @jsxImportSource @emotion/react */\n\nconst filterChipCss = css`\n  border: solid 3px transparent;\n  border-radius: 20px;\n  margin: 3px;\n  padding: 8px 12px;\n\n  &[chosen=\"true\"] {\n    background-color: rgb(211, 195, 241);\n    border: solid 3px darkslateblue;\n    color: black;\n  }\n\n  &[chosen=\"false\"]:hover {\n    background-color: rgb(228, 228, 228);\n  }\n`\n//Background color set this way only to fulfill micro badge requirements :)\nfunction FilterChip(props, color = 'rgb(207, 207, 207') {\n\n  return (\n    <button\n      css={filterChipCss}\n      chosen={props.isSelected.toString()}\n      onClick={() => props.onClick(props.tag)}\n      style={{ backgroundColor: color }}\n    >\n      {props.tag}\n    </button>\n  )\n}\n\nexport default FilterChip;","import FilterChip from './FilterChip';\nimport { css, jsx } from '@emotion/react';\n/** @jsxImportSource @emotion/react */\n\nconst filterGroupCss = css`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 40px 0;\n`\n\nfunction FilterGroup(props) {\n  const filters = [];\n  for (const tag of props.availableFilters) {\n    filters.push(\n      <FilterChip\n        isSelected={\n          props.selectedFilters.includes(tag)\n        }\n        key={tag}\n        onClick={() => props.addRemoveFilter(tag)}\n        tag={tag}\n      />\n    );\n  }\n\n  return (\n    <div\n      className=\"filter-group\"\n      css={filterGroupCss}\n    >\n      {filters}\n    </div>\n  );\n}\n\nexport default FilterGroup;","import { css, jsx } from '@emotion/react';\n/** @jsxImportSource @emotion/react */\n\nconst randomizeButtonCss = css`\n  background-color: rgb(0, 118, 139);\n  border: none;\n  border-radius: 5px;\n  color: white;\n  margin: 20px;\n  padding: 15px;\n\n  &:hover {\n    background-color: rgb(2, 148, 148);\n  }\n`\n\nfunction RandomizeButton(props) {\n  return (\n    <button\n      className=\"randomize-button\"\n      css={randomizeButtonCss}\n      onClick={() => props.onClick()}\n    >\n      {props.clicked ? 'Select a different activity' : 'Select activity'}\n    </button>\n  );\n}\n\nexport default RandomizeButton;","import { css, jsx } from '@emotion/react';\n/** @jsxImportSource @emotion/react */\n\nconst divCss = css`\n  display: none;\n  margin: 20px 0 0 0;\n\n  &[pressed=\"true\"] {\n    display: block;\n  }\n`\nconst textCss = css`\n  margin: 0;\n  text-align: center;\n`\nfunction ActivitySuggestion(props) {\n  return (\n    <div\n      pressed={props.clicked.toString()}\n      css={divCss}\n    >\n      <p css={textCss}>You should</p>\n      <h3 css={textCss}>{props.activity}!</h3>\n    </div>\n  );\n}\n\nexport default ActivitySuggestion;","import React, { useState } from 'react';\nimport './App.css';\nimport activities from './activities.json';\nimport Headline from './components/Headline';\nimport FilterGroup from './components/FilterGroup';\nimport RandomizeButton from './components/RandomizeButton';\nimport ActivitySuggestion from './components/ActivitySuggestion';\n\nfunction useFilters(initialState) {\n  const [selectedFilters, setSelectedFilters] = useState(initialState || []);\n\n  //Given a filter, adds it to selectedFilters if it's not already there, or removes it if it is already there.\n  const addRemoveFilter = (filter) => {\n    //If the filter is already in selectedFilters...\n    if (selectedFilters.some((item) => item === filter)) {\n      setSelectedFilters(prevFilters => prevFilters.filter((item) => item !== filter));\n    } else {\n      setSelectedFilters(prevFilters => [...prevFilters, filter]);\n    }\n  }\n\n  return [selectedFilters, addRemoveFilter];\n}\n\nfunction randomSelection(currentSuggestion, selectedFilters) {\n  let filteredActivities = [];\n\n  //Filter activities\n  if (selectedFilters.length === 0) {\n    for (const item in activities) {\n      filteredActivities.push(activities[item].name);\n    }\n  } else {\n    for (const item in activities) {\n      const isInActivityTags = (filter) => activities[item].tags.includes(filter);\n      //If an activity includes all of the selected filters...\n      if (selectedFilters.every(isInActivityTags)) {\n        filteredActivities.push(activities[item].name);\n      }\n    }\n  }\n\n  //If one of the activities in the list is the same as the activity that's currently being suggested, take it out\n  filteredActivities = filteredActivities.filter(item => item !== currentSuggestion);\n\n  let randomActivity;\n  //If there aren't any other viable activities besides the one that's already being suggested...\n  if (filteredActivities.length === 0) {\n    randomActivity = currentSuggestion;\n  } else {\n    const randomNum = Math.floor(Math.random() * filteredActivities.length);\n    randomActivity = filteredActivities[randomNum];\n  }\n  return randomActivity;\n}\n\nfunction App(props) {\n  const [currentSuggestion, setCurrentSuggestion] = useState(null);\n  const [hasBeenClicked, setHasBeenClicked] = useState(false);\n  const [selectedFilters, addRemoveFilter] = useFilters();\n\n  const handleSelectClick = () => {\n    const randomActivity = randomSelection(currentSuggestion, selectedFilters);\n\n    //Set suggestion\n    setCurrentSuggestion(randomActivity);\n\n    //Show suggestion\n    if (!hasBeenClicked) {\n      setHasBeenClicked(true);\n    }\n  }\n\n  // Only show available filters\n  const availableFilters = new Set();\n\n  for (const activity of activities) {\n    //If the activity item's tags contain ALL of the filters in the selectedFilters list...\n    if (selectedFilters.every(filter => activity.tags.includes(filter))) {\n      for (const tag of activity.tags) {\n        availableFilters.add(tag);\n      }\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <Headline />\n      <FilterGroup\n        addRemoveFilter={addRemoveFilter}\n        availableFilters={[...availableFilters]}\n        selectedFilters={selectedFilters}\n      />\n      <RandomizeButton\n        clicked={hasBeenClicked}\n        onClick={handleSelectClick}\n      />\n      <ActivitySuggestion\n        activity={currentSuggestion}\n        clicked={hasBeenClicked}\n      />\n    </div>\n  );\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}